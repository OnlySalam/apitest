name: "Simple deployment workflow"
on: 
    push: 
        branches: 
            - master
jobs:
    deploy:
        runs-on: self-hosted
        steps: 
            - name: "checksout the repository"
              uses: actions/checkout@v4

            - name: "Download Docker"
              run: | 
                sudo apt-get update
                sudo apt-get install ca-certificates curl -y
                sudo install -m 0755 -d /etc/apt/keyrings 
                sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
                sudo chmod a+r /etc/apt/keyrings/docker.asc
                echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update
                sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y



            - name: "Log in to Docker"
              uses: docker/login-action@v3
              with: 
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: "Resolve the image tag"
              id: tag_generator
              run: |
                echo "deployment_tag=$( git describe --always)" >> $GITHUB_OUTPUT
                echo "image_name=apitest" >> $GITHUB_OUTPUT
                echo "image_names=backend" >> $GITHUB_OUTPUT
                
                
                


            - name: "Build a Docker Image"
              run: |
                sudo docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.tag_generator.outputs.image_name }}:${{ steps.tag_generator.outputs.deployment_tag }} .
                sudo docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.tag_generator.outputs.image_names }}:${{ steps.tag_generator.outputs.deployment_tag }} backend_apitest/
              
            
            - name: "Logs in to Docker Again"
              run: |
                sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            
            - name: "Push the image to Docker Hub"
              run: |
                sudo docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.tag_generator.outputs.image_name }}:${{ steps.tag_generator.outputs.deployment_tag }} 
                sudo docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.tag_generator.outputs.image_names }}:${{ steps.tag_generator.outputs.deployment_tag }}
            

            # - name: 'Delete any running container'
            #   run: |
            #     sudo docker stop apitest && sudo docker rm apitest

            - name: "Remove any images on the system"
              run: |
                sudo docker rmi -f $( sudo docker images -q)
                
            - name: "Run the Docker image"
              run: |
                sudo docker run -d -p 80:80 --name apitest -e PORT=${{ secrets.PORTS }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.tag_generator.outputs.image_name }}:${{ steps.tag_generator.outputs.deployment_tag }}
                
            - name: "copy docker image to backend_apitest"
              run: |
                echo "copying image"
                scp -i ~/.ssh/mynewkey.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ubuntu@34.208.93.12 ${{ steps.tag_generator.outputs.image_names }}:${{ steps.tag_generator.outputs.deployment_tag }} ubuntu@10.0.2.122:/home/ubuntu
                
              
                # scp -r -i /home/ubuntu/mynewkey.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -i /home/ubuntu/mynewkey.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@34.208.93.12 -W %h:%p" /home/ubuntu/${{ steps.tag_generator.outputs.image_name }}:${{ steps.tag_generator.outputs.deployment_tag }} ubuntu@10.0.2.122:/home/ubuntu/
                echo "done"